# -*- coding: utf-8 -*-
"""
Created on Wed May  1 17:35:43 2019

@author: s140121038
"""

import numpy as np
import matplotlib.pyplot as plt
def normalize(x):
    x[0]=1 #for the normalize, the leading edge x point must equal 1
    x[len(x)-1]=1 #for the normalize, the trailing edge x point must equal 1
    return x
normalize(x)
def open_airfoil_file(filename):
    
    data=np.loadtxt(filename,skiprows=1)
    x = data[:,0] 
    y= data[:,1] 

    plt.plot(x,y,'-')
    plt.axes().set_aspect(1,'datalim')
    plt.title('Airfoil '+ filename)

    return x,y

x,y=open_airfoil_file('a18.dat')

def plot_chordline(x,y):
    lp = len(x)//2 #leading edge x point
    tep = len(x) # trailing edge x point
    clx=x[lp:tep]
    slope=(y[lp]-y[tep-1])/len(clx) #slope of leading and trailing edge
    cly=[y[lp]]*len(clx)
        
    for i in range (1,len(cly)):
        cly[i]=cly[i]-i*slope
        
    
    plt.plot(clx,cly,'--',color='black')
    return slope

plot_chordline(x,y)

def plot_meanline():
        
        t=(len(x)//2)
        x_upper=x[:t] #upper surface x points
        x_lower=x[t+1:] #lower surface x points
        y_upper=y[:t] #upper surface y points
        y_lower=y[t+1:] #lower surface y points
        ml=[]  #mean line
        x_point = []  
        thickness=[] 
        for i in range (t):    
            ml =ml + [(y_upper[i]+y_lower[-i-1])/2]
        
        plt.plot(x[:t],ml,'-',color='black')
        k=0
        for i in range(t):
            if ml[i-1]<ml[i]:
        
                k=k+1
        x_point=[x_upper[k]]*2
        thickness = thickness + [y_upper[k]] +[y_lower[-k-1]]
        plt.plot(x_point,thickness,'-',color='blue') #maximum thickness
        return ml,x_upper
ml,x_upper=plot_meanline()

def cusped():
    limit = np.deg2rad(15) # 15 degrees approximation
    upper_slope = (y[0]-y[1])/(x[0]-x[1])
    lower_slope = (y[-1]-y[-2])/(x[-1]-x[-2])
    ml_slope = (ml[-1]-ml[-2]) / (x_upper[-1]-y_upper[-2])
    theta1 = np.arctan(upper_slope)-np.arctan(ml_slope)
    theta2 = np.arctan(ml_slope)-np.arctan(lower_slope)
    print(theta1, theta2, abs(theta1+theta2))
    
    if abs(theta1+theta2) <= limit:
        return True
    return False

cusped()
